# name: Nestjs CI

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   lint:
#     runs-on: ubuntu-latest

#     strategy:
#       fail-fast: false
#       matrix:
#         node-version: [20.x] #18.x,

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v2
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: Install dependencies
#         run: npm ci
#       - name: Run lint
#         run: npm run lint

#   # test:
#   #   needs: lint
#   #   runs-on: ubuntu-latest
#   #   strategy:
#   #     fail-fast: false
#   #     matrix:
#   #       node-version: [20.x] #18.x,
#   #   steps:
#   #     - uses: actions/checkout@v2
#   #     - name: Use Node.js ${{ matrix.node-version }}
#   #       uses: actions/setup-node@v2
#   #       with:
#   #         node-version: ${{ matrix.node-version }}
#   #     - name: Install dependencies
#   #       run: npm ci
#   #     - name: Run lint
#   #       run: npm run lint
#   #     - name: Run tests
#   #       run: npm test

#   deploy:
#     needs: lint
#     runs-on: self-hosted
#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # - name: Set AWS region to ap-northeast-2
#       #   run: aws configure set default.region ap-northeast-2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
#         with:
#           # role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
#           role-to-assume: arn:aws:iam::730335305602:role/TestAll
#           aws-region: aws-region-2

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
#         # with:
#         #   aws-region: ap-northeast-2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: cicdtest
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#       # - name: Deploy to EC2
#       #   uses: appleboy/ssh-action@master
#       # with:
#       # host: ${{ secrets.HOST }}
#       # username: ${{ secrets.USERNAME }}
#       # key: ${{ secrets.SSH_PRIVATE_KEY }}
#       # port: ${{ secrets.PORT }}
#       # script: |
#       # # 프로젝트 디렉토리로 이동
#       # cd /home/ubuntu/CI-CD-test

#       # # GitHub에서 최신 코드를 가져옴
#       # git pull origin main

#       # # .env 파일 생성
#       # echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
#       # echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env
#       # echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env

#       # # node 관련 환경 설정 가져오기 위해 실행
#       # source /home/ubuntu/.nvm/nvm.sh
#       # # 서버 실행 시크립트 가동!
#       # source ./run.sh

name: Sync Hotfix Branch to Dev

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-to-dev:
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'sync-to-dev')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout dev
        uses: actions/checkout@v3
        with:
          ref: dev
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge hotfix branch to dev
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git merge origin/${{ github.event.pull_request.head.ref }} --no-edit || true
          git push origin dev

      - name: Delete hotfix branch (optional)
        run: |
          git push origin --delete ${{ github.event.pull_request.head.ref }}
        if: success()
